// ------------------------------------------------------------------------------
//  <auto-generated>
//      Este código lo generó el generador de pruebas de IU codificadas.
//      Versión: 10.0.0.0
//
//      Los cambios realizados en este archivo pueden provocar un comportamiento incorrecto y se perderán si
//      se vuelve a generar el código.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Generador de pruebas de UI codificadas", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethodNuevaPartida
        /// </summary>
        public void RecordedMethodNuevaPartida()
        {
            #region Variable Declarations
            WinButton uIButton11Button = this.UITresenrayaWindow.UIButton11Window.UIButton11Button;
            WinButton uIButton00Button = this.UITresenrayaWindow.UIButton00Window.UIButton00Button;
            WinButton uIButton22Button = this.UITresenrayaWindow.UIButton22Window.UIButton22Button;
            WinButton uINuevapartidaButton = this.UITresenrayaWindow.UINuevapartidaWindow.UINuevapartidaButton;
            #endregion

            // Clic 'button11' botón
            Mouse.Click(uIButton11Button, new Point(32, 31));

            // Clic 'button00' botón
            Mouse.Click(uIButton00Button, new Point(41, 40));

            // Clic 'button22' botón
            Mouse.Click(uIButton22Button, new Point(6, 35));

            // Clic 'Nueva partida' botón
            Mouse.Click(uINuevapartidaButton, new Point(83, 17));
        }
        
        /// <summary>
        /// AssertMethodNuevaPartida: use 'AssertMethodNuevaPartidaExpectedValues' para pasar parámetros a este método.
        /// </summary>
        public void AssertMethodNuevaPartida()
        {
            #region Variable Declarations
            WinButton uIButton00Button = this.UITresenrayaWindow.UIButton00Window.UIButton00Button;
            WinButton uIButton10Button = this.UITresenrayaWindow.UIButton10Window.UIButton10Button;
            WinButton uIButton20Button = this.UITresenrayaWindow.UIButton20Window.UIButton20Button;
            WinButton uIButton01Button = this.UITresenrayaWindow.UIButton01Window.UIButton01Button;
            WinButton uIButton11Button = this.UITresenrayaWindow.UIButton11Window.UIButton11Button;
            WinButton uIButton21Button = this.UITresenrayaWindow.UIButton21Window.UIButton21Button;
            WinButton uIButton02Button = this.UITresenrayaWindow.UIButton02Window.UIButton02Button;
            WinButton uIButton12Button = this.UITresenrayaWindow.UIButton12Window.UIButton12Button;
            WinButton uIButton22Button = this.UITresenrayaWindow.UIButton22Window.UIButton22Button;
            #endregion

            // Comprobar que la propiedad 'DisplayText' de botón 'button00' es igual a ''
            Assert.AreEqual(this.AssertMethodNuevaPartidaExpectedValues.UIButton00ButtonDisplayText, uIButton00Button.DisplayText);

            // Comprobar que la propiedad 'DisplayText' de botón 'button10' es igual a ''
            Assert.AreEqual(this.AssertMethodNuevaPartidaExpectedValues.UIButton10ButtonDisplayText, uIButton10Button.DisplayText);

            // Comprobar que la propiedad 'DisplayText' de botón 'button20' es igual a ''
            Assert.AreEqual(this.AssertMethodNuevaPartidaExpectedValues.UIButton20ButtonDisplayText, uIButton20Button.DisplayText);

            // Comprobar que la propiedad 'DisplayText' de botón 'button01' es igual a ''
            Assert.AreEqual(this.AssertMethodNuevaPartidaExpectedValues.UIButton01ButtonDisplayText, uIButton01Button.DisplayText);

            // Comprobar que la propiedad 'DisplayText' de botón 'button11' es igual a ''
            Assert.AreEqual(this.AssertMethodNuevaPartidaExpectedValues.UIButton11ButtonDisplayText, uIButton11Button.DisplayText);

            // Comprobar que la propiedad 'DisplayText' de botón 'button21' es igual a ''
            Assert.AreEqual(this.AssertMethodNuevaPartidaExpectedValues.UIButton21ButtonDisplayText, uIButton21Button.DisplayText);

            // Comprobar que la propiedad 'DisplayText' de botón 'button02' es igual a ''
            Assert.AreEqual(this.AssertMethodNuevaPartidaExpectedValues.UIButton02ButtonDisplayText, uIButton02Button.DisplayText);

            // Comprobar que la propiedad 'DisplayText' de botón 'button12' es igual a ''
            Assert.AreEqual(this.AssertMethodNuevaPartidaExpectedValues.UIButton12ButtonDisplayText, uIButton12Button.DisplayText);

            // Comprobar que la propiedad 'DisplayText' de botón 'button22' es igual a ''
            Assert.AreEqual(this.AssertMethodNuevaPartidaExpectedValues.UIButton22ButtonDisplayText, uIButton22Button.DisplayText);
        }
        
        #region Properties
        public virtual AssertMethodNuevaPartidaExpectedValues AssertMethodNuevaPartidaExpectedValues
        {
            get
            {
                if ((this.mAssertMethodNuevaPartidaExpectedValues == null))
                {
                    this.mAssertMethodNuevaPartidaExpectedValues = new AssertMethodNuevaPartidaExpectedValues();
                }
                return this.mAssertMethodNuevaPartidaExpectedValues;
            }
        }
        
        public UITresenrayaWindow UITresenrayaWindow
        {
            get
            {
                if ((this.mUITresenrayaWindow == null))
                {
                    this.mUITresenrayaWindow = new UITresenrayaWindow();
                }
                return this.mUITresenrayaWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertMethodNuevaPartidaExpectedValues mAssertMethodNuevaPartidaExpectedValues;
        
        private UITresenrayaWindow mUITresenrayaWindow;
        #endregion
    }
    
    /// <summary>
    /// Parámetros que se van a pasar a 'AssertMethodNuevaPartida'
    /// </summary>
    [GeneratedCode("Generador de pruebas de UI codificadas", "10.0.30319.1")]
    public class AssertMethodNuevaPartidaExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Comprobar que la propiedad 'DisplayText' de botón 'button00' es igual a ''
        /// </summary>
        public string UIButton00ButtonDisplayText = "";
        
        /// <summary>
        /// Comprobar que la propiedad 'DisplayText' de botón 'button10' es igual a ''
        /// </summary>
        public string UIButton10ButtonDisplayText = "";
        
        /// <summary>
        /// Comprobar que la propiedad 'DisplayText' de botón 'button20' es igual a ''
        /// </summary>
        public string UIButton20ButtonDisplayText = "";
        
        /// <summary>
        /// Comprobar que la propiedad 'DisplayText' de botón 'button01' es igual a ''
        /// </summary>
        public string UIButton01ButtonDisplayText = "";
        
        /// <summary>
        /// Comprobar que la propiedad 'DisplayText' de botón 'button11' es igual a ''
        /// </summary>
        public string UIButton11ButtonDisplayText = "";
        
        /// <summary>
        /// Comprobar que la propiedad 'DisplayText' de botón 'button21' es igual a ''
        /// </summary>
        public string UIButton21ButtonDisplayText = "";
        
        /// <summary>
        /// Comprobar que la propiedad 'DisplayText' de botón 'button02' es igual a ''
        /// </summary>
        public string UIButton02ButtonDisplayText = "";
        
        /// <summary>
        /// Comprobar que la propiedad 'DisplayText' de botón 'button12' es igual a ''
        /// </summary>
        public string UIButton12ButtonDisplayText = "";
        
        /// <summary>
        /// Comprobar que la propiedad 'DisplayText' de botón 'button22' es igual a ''
        /// </summary>
        public string UIButton22ButtonDisplayText = "";
        #endregion
    }
    
    [GeneratedCode("Generador de pruebas de UI codificadas", "10.0.30319.1")]
    public class UITresenrayaWindow : WinWindow
    {
        
        public UITresenrayaWindow()
        {
            #region Criterio de búsqueda
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Tres en raya";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Tres en raya");
            #endregion
        }
        
        #region Properties
        public UIButton11Window UIButton11Window
        {
            get
            {
                if ((this.mUIButton11Window == null))
                {
                    this.mUIButton11Window = new UIButton11Window(this);
                }
                return this.mUIButton11Window;
            }
        }
        
        public UIButton00Window UIButton00Window
        {
            get
            {
                if ((this.mUIButton00Window == null))
                {
                    this.mUIButton00Window = new UIButton00Window(this);
                }
                return this.mUIButton00Window;
            }
        }
        
        public UIButton22Window UIButton22Window
        {
            get
            {
                if ((this.mUIButton22Window == null))
                {
                    this.mUIButton22Window = new UIButton22Window(this);
                }
                return this.mUIButton22Window;
            }
        }
        
        public UINuevapartidaWindow UINuevapartidaWindow
        {
            get
            {
                if ((this.mUINuevapartidaWindow == null))
                {
                    this.mUINuevapartidaWindow = new UINuevapartidaWindow(this);
                }
                return this.mUINuevapartidaWindow;
            }
        }
        
        public UIButton10Window UIButton10Window
        {
            get
            {
                if ((this.mUIButton10Window == null))
                {
                    this.mUIButton10Window = new UIButton10Window(this);
                }
                return this.mUIButton10Window;
            }
        }
        
        public UIButton20Window UIButton20Window
        {
            get
            {
                if ((this.mUIButton20Window == null))
                {
                    this.mUIButton20Window = new UIButton20Window(this);
                }
                return this.mUIButton20Window;
            }
        }
        
        public UIButton01Window UIButton01Window
        {
            get
            {
                if ((this.mUIButton01Window == null))
                {
                    this.mUIButton01Window = new UIButton01Window(this);
                }
                return this.mUIButton01Window;
            }
        }
        
        public UIButton21Window UIButton21Window
        {
            get
            {
                if ((this.mUIButton21Window == null))
                {
                    this.mUIButton21Window = new UIButton21Window(this);
                }
                return this.mUIButton21Window;
            }
        }
        
        public UIButton02Window UIButton02Window
        {
            get
            {
                if ((this.mUIButton02Window == null))
                {
                    this.mUIButton02Window = new UIButton02Window(this);
                }
                return this.mUIButton02Window;
            }
        }
        
        public UIButton12Window UIButton12Window
        {
            get
            {
                if ((this.mUIButton12Window == null))
                {
                    this.mUIButton12Window = new UIButton12Window(this);
                }
                return this.mUIButton12Window;
            }
        }
        #endregion
        
        #region Fields
        private UIButton11Window mUIButton11Window;
        
        private UIButton00Window mUIButton00Window;
        
        private UIButton22Window mUIButton22Window;
        
        private UINuevapartidaWindow mUINuevapartidaWindow;
        
        private UIButton10Window mUIButton10Window;
        
        private UIButton20Window mUIButton20Window;
        
        private UIButton01Window mUIButton01Window;
        
        private UIButton21Window mUIButton21Window;
        
        private UIButton02Window mUIButton02Window;
        
        private UIButton12Window mUIButton12Window;
        #endregion
    }
    
    [GeneratedCode("Generador de pruebas de UI codificadas", "10.0.30319.1")]
    public class UIButton11Window : WinWindow
    {
        
        public UIButton11Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Criterio de búsqueda
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button11";
            this.WindowTitles.Add("Tres en raya");
            #endregion
        }
        
        #region Properties
        public WinButton UIButton11Button
        {
            get
            {
                if ((this.mUIButton11Button == null))
                {
                    this.mUIButton11Button = new WinButton(this);
                    #region Criterio de búsqueda
                    this.mUIButton11Button.WindowTitles.Add("Tres en raya");
                    #endregion
                }
                return this.mUIButton11Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIButton11Button;
        #endregion
    }
    
    [GeneratedCode("Generador de pruebas de UI codificadas", "10.0.30319.1")]
    public class UIButton00Window : WinWindow
    {
        
        public UIButton00Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Criterio de búsqueda
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button00";
            this.WindowTitles.Add("Tres en raya");
            #endregion
        }
        
        #region Properties
        public WinButton UIButton00Button
        {
            get
            {
                if ((this.mUIButton00Button == null))
                {
                    this.mUIButton00Button = new WinButton(this);
                    #region Criterio de búsqueda
                    this.mUIButton00Button.WindowTitles.Add("Tres en raya");
                    #endregion
                }
                return this.mUIButton00Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIButton00Button;
        #endregion
    }
    
    [GeneratedCode("Generador de pruebas de UI codificadas", "10.0.30319.1")]
    public class UIButton22Window : WinWindow
    {
        
        public UIButton22Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Criterio de búsqueda
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button22";
            this.WindowTitles.Add("Tres en raya");
            #endregion
        }
        
        #region Properties
        public WinButton UIButton22Button
        {
            get
            {
                if ((this.mUIButton22Button == null))
                {
                    this.mUIButton22Button = new WinButton(this);
                    #region Criterio de búsqueda
                    this.mUIButton22Button.WindowTitles.Add("Tres en raya");
                    #endregion
                }
                return this.mUIButton22Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIButton22Button;
        #endregion
    }
    
    [GeneratedCode("Generador de pruebas de UI codificadas", "10.0.30319.1")]
    public class UINuevapartidaWindow : WinWindow
    {
        
        public UINuevapartidaWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Criterio de búsqueda
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonNuevaPartida";
            this.WindowTitles.Add("Tres en raya");
            #endregion
        }
        
        #region Properties
        public WinButton UINuevapartidaButton
        {
            get
            {
                if ((this.mUINuevapartidaButton == null))
                {
                    this.mUINuevapartidaButton = new WinButton(this);
                    #region Criterio de búsqueda
                    this.mUINuevapartidaButton.SearchProperties[WinButton.PropertyNames.Name] = "Nueva partida";
                    this.mUINuevapartidaButton.WindowTitles.Add("Tres en raya");
                    #endregion
                }
                return this.mUINuevapartidaButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINuevapartidaButton;
        #endregion
    }
    
    [GeneratedCode("Generador de pruebas de UI codificadas", "10.0.30319.1")]
    public class UIButton10Window : WinWindow
    {
        
        public UIButton10Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Criterio de búsqueda
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button10";
            this.WindowTitles.Add("Tres en raya");
            #endregion
        }
        
        #region Properties
        public WinButton UIButton10Button
        {
            get
            {
                if ((this.mUIButton10Button == null))
                {
                    this.mUIButton10Button = new WinButton(this);
                    #region Criterio de búsqueda
                    this.mUIButton10Button.WindowTitles.Add("Tres en raya");
                    #endregion
                }
                return this.mUIButton10Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIButton10Button;
        #endregion
    }
    
    [GeneratedCode("Generador de pruebas de UI codificadas", "10.0.30319.1")]
    public class UIButton20Window : WinWindow
    {
        
        public UIButton20Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Criterio de búsqueda
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button20";
            this.WindowTitles.Add("Tres en raya");
            #endregion
        }
        
        #region Properties
        public WinButton UIButton20Button
        {
            get
            {
                if ((this.mUIButton20Button == null))
                {
                    this.mUIButton20Button = new WinButton(this);
                    #region Criterio de búsqueda
                    this.mUIButton20Button.WindowTitles.Add("Tres en raya");
                    #endregion
                }
                return this.mUIButton20Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIButton20Button;
        #endregion
    }
    
    [GeneratedCode("Generador de pruebas de UI codificadas", "10.0.30319.1")]
    public class UIButton01Window : WinWindow
    {
        
        public UIButton01Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Criterio de búsqueda
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button01";
            this.WindowTitles.Add("Tres en raya");
            #endregion
        }
        
        #region Properties
        public WinButton UIButton01Button
        {
            get
            {
                if ((this.mUIButton01Button == null))
                {
                    this.mUIButton01Button = new WinButton(this);
                    #region Criterio de búsqueda
                    this.mUIButton01Button.WindowTitles.Add("Tres en raya");
                    #endregion
                }
                return this.mUIButton01Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIButton01Button;
        #endregion
    }
    
    [GeneratedCode("Generador de pruebas de UI codificadas", "10.0.30319.1")]
    public class UIButton21Window : WinWindow
    {
        
        public UIButton21Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Criterio de búsqueda
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button21";
            this.WindowTitles.Add("Tres en raya");
            #endregion
        }
        
        #region Properties
        public WinButton UIButton21Button
        {
            get
            {
                if ((this.mUIButton21Button == null))
                {
                    this.mUIButton21Button = new WinButton(this);
                    #region Criterio de búsqueda
                    this.mUIButton21Button.WindowTitles.Add("Tres en raya");
                    #endregion
                }
                return this.mUIButton21Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIButton21Button;
        #endregion
    }
    
    [GeneratedCode("Generador de pruebas de UI codificadas", "10.0.30319.1")]
    public class UIButton02Window : WinWindow
    {
        
        public UIButton02Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Criterio de búsqueda
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button02";
            this.WindowTitles.Add("Tres en raya");
            #endregion
        }
        
        #region Properties
        public WinButton UIButton02Button
        {
            get
            {
                if ((this.mUIButton02Button == null))
                {
                    this.mUIButton02Button = new WinButton(this);
                    #region Criterio de búsqueda
                    this.mUIButton02Button.WindowTitles.Add("Tres en raya");
                    #endregion
                }
                return this.mUIButton02Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIButton02Button;
        #endregion
    }
    
    [GeneratedCode("Generador de pruebas de UI codificadas", "10.0.30319.1")]
    public class UIButton12Window : WinWindow
    {
        
        public UIButton12Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Criterio de búsqueda
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button12";
            this.WindowTitles.Add("Tres en raya");
            #endregion
        }
        
        #region Properties
        public WinButton UIButton12Button
        {
            get
            {
                if ((this.mUIButton12Button == null))
                {
                    this.mUIButton12Button = new WinButton(this);
                    #region Criterio de búsqueda
                    this.mUIButton12Button.WindowTitles.Add("Tres en raya");
                    #endregion
                }
                return this.mUIButton12Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIButton12Button;
        #endregion
    }
}
